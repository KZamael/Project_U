<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.projectu.th</groupId>
  <artifactId>projectu</artifactId>
  <version>1.0-SNAPSHOT</version>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <source>13</source>
          <target>13</target>
          <release>13</release>
        </configuration>
      </plugin>
      <plugin>
        <!-- the assembly plugin enables the packaging of a jar archive
              containing all dependencies and having a MainClass configured
              the resulting jar is directly executable via 'java' shell command -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <archive>
                <!-- creates a jar manifest with 'Server' as MainClass -->
                <manifest>
                  <mainClass>
                    app.MainApplication
                  </mainClass>
                </manifest>
              </archive>
              <!-- built in feature for packaging a jar with all dependencies
                   including the transitive ones -->
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
              <!-- configures the name of the resulting jar (project_U-full.jar) -->
              <appendAssemblyId>false</appendAssemblyId>
              <finalName>${project.artifactId}-full</finalName>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <!-- the file name of the skinny jar (without dependencies) (quitt.jar) -->
    <finalName>${project.artifactId}</finalName>
  </build>

  <dependencies>
    <!-- javalin framework -->
    <dependency>
      <groupId>io.javalin</groupId>
      <artifactId>javalin</artifactId>
      <version>3.6.0</version>
    </dependency>
    <!-- logging library needed by javalin at runtime -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>1.7.28</version>
    </dependency>
    <!-- thymeleaf template engine used for dynamic serverside HTML-Templates -->
    <dependency>
      <groupId>org.thymeleaf</groupId>
      <artifactId>thymeleaf</artifactId>
      <version>3.0.9.RELEASE</version>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>19.0</version>
    </dependency>

    <dependency>
      <groupId>org.mindrot</groupId>
      <artifactId>jbcrypt</artifactId>
      <version>0.3m</version>
    </dependency>

    <!--dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity-engine-core</artifactId>
      <version>2.1</version>
    </dependency-->


    <!-- https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver -->
    <!-- the java driver for MongoDB. Note that we use the sync-driver
         (multiple versions exist with different artifactId's) -->
    <dependency>
      <groupId>org.mongodb</groupId>
      <artifactId>mongodb-driver-sync</artifactId>
      <version>3.12.0</version>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.13</version>
    </dependency>

    <!-- JUnit is a well known Library that can be used directly in maven's "test" phase
           for executing unit tests. Note the scope here (we do not package that lib into the
           app just use it in tests) see https://junit.org/junit5/docs/current/user-guide/ -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.5.2</version>
      <scope>test</scope>
    </dependency>
    <!-- Mockito is a Framework for building and using mock objects in unit tests
         Note the scope here (we do not package that lib into the
         app just use it in tests)
         see https://site.mockito.org
         Note: as mentioned in https://javalin.io/tutorials/mockito-testing
         a special file has been placed in src/text/resources/mockito-extensions (org.mockito.plugins.MockMaker)
         in order to activate a diffrent mock creation process in order to be able
         to mock final classes -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>3.2.4</version>
      <scope>test</scope>
    </dependency>

  </dependencies>
</project>